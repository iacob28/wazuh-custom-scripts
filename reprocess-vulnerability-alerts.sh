#!/bin/bash

# Define variables
alerts_file="alerts.json"
output_dir="alerts-to-reprocess"
create_ticket=false

# Define color codes
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print messages with color
function print_success {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

function print_error {
    echo -e "${RED}[ERROR]${NC} $1"
}

function print_warning {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

function print_info {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Display help message
function display_help {
    echo -e "${YELLOW}Usage:${NC} $0 [OPTION]"
    echo -e "\nOptions:"
    echo -e "  --create-jira-ticket   Enable Jira ticket creation for each alert."
    echo -e "  --no-jira-ticket       Disable Jira ticket creation (process alerts only)."
    echo -e "  --help                 Display this help message."
    echo -e "\nExample:"
    echo -e "  $0 --create-jira-ticket   # Process alerts and create Jira tickets."
    echo -e "  $0 --no-jira-ticket       # Process alerts without creating Jira tickets."
}

# Check if no parameter is provided
if [[ -z "$1" ]]; then
    display_help
    exit 0
fi

# Check input parameter
case "$1" in
    --create-jira-ticket)
        create_ticket=true
        print_info "Jira ticket creation is enabled."
        ;;
    --no-jira-ticket)
        print_info "Jira ticket creation is disabled."
        ;;
    --help)
        display_help
        exit 0
        ;;
    *)
        print_error "Invalid option. Use '--help' for usage information."
        exit 1
        ;;
esac

# Check if the alerts.json file exists
if [[ ! -f "$alerts_file" ]]; then
    print_error "The file '$alerts_file' does not exist in the current directory."
    exit 1
else
    print_success "Found alerts.json file. Processing..."
fi

# Create output directory if it doesn't exist
if [[ ! -d "$output_dir" ]]; then
    mkdir -p "$output_dir" && print_success "Created directory '$output_dir'." || print_error "Failed to create directory '$output_dir'."
else
    print_warning "Directory '$output_dir' already exists. Files may be overwritten."
fi

# Print an info message once if Jira ticket creation is disabled
if ! $create_ticket; then
    print_info "Skipped Jira ticket creation for all files."
fi

# Extract JSON objects with location=="vulnerability-detector"
jq -c 'select(.location == "vulnerability-detector")' "$alerts_file" | while read -r json_obj; do
    # Get the ID for the filename
    alert_id=$(echo "$json_obj" | jq -r '.id')
    
    # Define the output file path
    output_file="$output_dir/$alert_id.json"
    
    # Save JSON object to file
    echo "$json_obj" > "$output_file" && print_success "Saved alert to '$output_file'." || print_error "Failed to save alert to '$output_file'."

    # Conditionally execute the Docker command
    if $create_ticket; then
        docker exec single-node-wazuh.manager-1 sh /var/ossec/integrations/custom-jira-vulnerability "$output_file" user@example.com:your_api_token https://example.atlassian.net

        if [[ $? -eq 0 ]]; then
            print_success "Executed Docker command for '$output_file'."
        else
            print_error "Failed to execute Docker command for '$output_file'."
        fi
    fi
done

print_success "All alerts have been processed."
